---
layout: base.njk
title: "MLB Projection Accuracy"
---

{% set battingStats = [
  { name: 'Plate Appearances', stat: 'PA', baseName: 'battingPA', isVolume: true },
  { name: 'wOBA', stat: 'wOBA', baseName: 'battingwOBA', isVolume: false }
] %}

{% set pitchingStats = [
  { name: 'Batters Faced', stat: 'BF', baseName: 'pitchingBF', isVolume: true },
  { name: 'wOBA', stat: 'wOBA', baseName: 'pitchingwOBA', isVolume: false }
] %}

{% set metrics = [
  { value: 'MAE', name: 'MAE', title: 'MAE' },
  { value: 'RMSE', name: 'RMSE', title: 'RMSE'}
] %}

{% set adjustments = [
  { value: 'weighted-league-adj', name: 'Weighted League-Adjusted', chartSuffix: 'WeightedLeagueAdj' },
  { value: 'league-adj', name: 'League-Adjusted', chartSuffix: 'LeagueAdj' },
  { value: 'raw', name: 'Raw', chartSuffix: '' }
] %}

<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12 sm:py-16 lg:py-20">
    <div class="text-lg text-gray-600 dark:text-gray-300 max-w-4xl mx-auto mb-16">
      <h1 class="text-center text-balance text-4xl sm:text-5xl md:text-6xl font-bold text-gray-900 dark:text-white mb-8">An open-source framework for analyzing MLB player projection accuracy</h1>
      <p class="mb-6 text-lg sm:text-xl">
        <strong>Whiffs</strong> does the normal MAE and RMSE analysis you might find in other projection evaluations, then takes it to the next level. It scales projections to a consistent league average and weights errors by playing time. (Check out the <a href="/methodology/" class="text-blue-600 dark:text-blue-400 hover:underline">methodology</a> for details.)
      </p>
      <p class="mb-8 text-lg sm:text-xl">
        It currently has accuracy data for Marcel, Steamer, and ZiPS projection from 2010-2024, with more to come.
      </p>
    </div>

    <!-- Playing Time Section -->
    <div class="mb-12">
        <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-8 text-center">Playing Time Projection Accuracy</h2>
        <div class="space-y-6">
            <div class="mb-4 py-4">
              <div class="mb-4 py-4">
                <h4 class="text-xl font-semibold text-gray-900 dark:text-white mb-3">Plate Appearances (PA)</h4>
                <div class="flex flex-wrap gap-4">
                    <select class="metric-select px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white">
                      {% for metric in metrics %}
                      <option value="{{ metric.value }}">{{ metric.title }}</option>
                      {% endfor %}
                    </select>
                </div>
              </div>

                {% for metric in metrics %}
                    {% set adj = adjustments | selectattr("value", "equalto", "raw") | first %}
                    <div class="bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-700 p-6 chart-container" data-stat="PA" data-metric="{{ metric.value }}" data-adjustment="{{ adj.value }}">
                        <div class="h-80"><canvas id="battingPA{{ 'MAE' if metric.value == 'MAE' else '' }}Chart"></canvas></div>
                    </div>
                {% endfor %}
            </div>

            <div class="mb-4 py-4">
              <div class="mb-4 py-4">
                <h4 class="text-xl font-semibold text-gray-900 dark:text-white mb-3">Batters Faced (BF)</h4>
                <div class="flex flex-wrap gap-4">
                    <select class="metric-select px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white">
                      {% for metric in metrics %}
                      <option value="{{ metric.value }}">{{ metric.title }}</option>
                      {% endfor %}
                    </select>
                </div>
              </div>

                {% for metric in metrics %}
                    {% set adj = adjustments | selectattr("value", "equalto", "raw") | first %}
                    <div class="bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-700 p-6 chart-container" data-stat="BF" data-metric="{{ metric.value }}" data-adjustment="{{ adj.value }}">
                        <div class="h-80"><canvas id="pitchingBF{{ 'MAE' if metric.value == 'MAE' else '' }}Chart"></canvas></div>
                    </div>
                {% endfor %}
            </div>
        </div>
    </div>

    <!-- Overall Performance Section -->
    <div class="mb-12">
        <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-8 text-center">Overall Performance Projection Accuracy</h2>
        <div class="space-y-6">
            <div class="mb-4 py-4">
              <div class="mb-4 py-4">
                <h4 class="text-xl font-semibold text-gray-900 dark:text-white mb-3">Hitter wOBA</h4>
                <div class="flex flex-wrap gap-4">
                    <select class="metric-select px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white">
                      {% for metric in metrics %}
                      <option value="{{ metric.value }}">{{ metric.title }}</option>
                      {% endfor %}
                    </select>
                    <select class="adjustment-select px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white">
                      {% for adj in adjustments %}
                      <option value="{{ adj.value }}">{{ adj.name }}</option>
                      {% endfor %}
                    </select>
                </div>
              </div>

                {% for metric in metrics %}
                    {% for adj in adjustments %}
                    <div class="bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-700 p-6 chart-container" data-stat="wOBA" data-metric="{{ metric.value }}" data-adjustment="{{ adj.value }}">
                        <div class="h-80"><canvas id="battingwOBA{{ adj.chartSuffix }}{{ 'MAE' if metric.value == 'MAE' else '' }}Chart"></canvas></div>
                    </div>
                    {% endfor %}
                {% endfor %}
            </div>

            <div class="mb-4 py-4">
              <div class="mb-4 py-4">
                <h4 class="text-xl font-semibold text-gray-900 dark:text-white mb-3">Pitcher wOBA</h4>
                <div class="flex flex-wrap gap-4">
                    <select class="metric-select px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white">
                      {% for metric in metrics %}
                      <option value="{{ metric.value }}">{{ metric.title }}</option>
                      {% endfor %}
                    </select>
                    <select class="adjustment-select px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white">
                      {% for adj in adjustments %}
                      <option value="{{ adj.value }}">{{ adj.name }}</option>
                      {% endfor %}
                    </select>
                </div>
              </div>

                {% for metric in metrics %}
                    {% for adj in adjustments %}
                    <div class="bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-700 p-6 chart-container" data-stat="wOBA" data-metric="{{ metric.value }}" data-adjustment="{{ adj.value }}">
                        <div class="h-80"><canvas id="pitchingwOBA{{ adj.chartSuffix }}{{ 'MAE' if metric.value == 'MAE' else '' }}Chart"></canvas></div>
                    </div>
                    {% endfor %}
                {% endfor %}
            </div>
        </div>
    </div>

    <!-- Link to Detailed Stats -->
    <div class="text-center mb-12">
        <a href="/stats/" class="text-lg text-blue-600 dark:text-blue-400 hover:underline">
            View all-time stats for all metrics â†’
        </a>
    </div>
</div>

{% block scripts %}
<script>
    {% include "chart-utils.js" %}
    {% include "index-charts.js" %}
    document.addEventListener('DOMContentLoaded', function() {
        initializeIndexCharts({{ years | dump | safe }}, {{ site.meta.projection_systems | dump | safe }});
        initializeChartFilters();
    });

    function initializeChartFilters() {
        const metricSelects = document.querySelectorAll('.metric-select');
        const adjustmentSelects = document.querySelectorAll('.adjustment-select');

        function updateChartVisibility() {
            // Get current values from any metric/adjustment dropdown (they should all be synced)
            const selectedMetric = metricSelects[0].value;
            const selectedAdjustment = adjustmentSelects.length > 0 ? adjustmentSelects[0].value : 'raw';

            // Get all chart containers
            const chartContainers = document.querySelectorAll('.chart-container');

            chartContainers.forEach(container => {
                const chartMetric = container.dataset.metric;
                const chartAdjustment = container.dataset.adjustment;
                const chartStat = container.dataset.stat;

                // Volume stats (PA, BF) only have raw adjustment, so ignore adjustment selection for them
                const isVolumestat = chartStat === 'PA' || chartStat === 'BF';

                const shouldShow = chartMetric === selectedMetric &&
                    (isVolumestat || chartAdjustment === selectedAdjustment);

                container.style.display = shouldShow ? 'block' : 'none';
            });
        }

        function syncDropdowns(changedSelect, selectType) {
            if (selectType === 'metric') {
                // Sync all metric dropdowns
                metricSelects.forEach(select => {
                    if (select !== changedSelect) {
                        select.value = changedSelect.value;
                    }
                });
            } else if (selectType === 'adjustment') {
                // Sync all adjustment dropdowns
                adjustmentSelects.forEach(select => {
                    if (select !== changedSelect) {
                        select.value = changedSelect.value;
                    }
                });
            }
            updateChartVisibility();
        }

        // Add event listeners to all metric dropdowns
        metricSelects.forEach(select => {
            select.addEventListener('change', function() {
                syncDropdowns(this, 'metric');
            });
        });

        // Add event listeners to all adjustment dropdowns
        adjustmentSelects.forEach(select => {
            select.addEventListener('change', function() {
                syncDropdowns(this, 'adjustment');
            });
        });

        // Initial visibility setup
        updateChartVisibility();
    }
</script>
{% endblock %}


