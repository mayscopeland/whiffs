---js
module.exports = {
  layout: "base.njk",
  pagination: {
    data: "players.items",
    size: 1,
    alias: "player_id",
  },
  permalink: "/players/{{ player_id }}/",
  eleventyComputed: {
    player: (data) => data.players.getPlayer(data.player_id),
    title: (data) => `${data.players.getPlayerName(data.player_id)} Projection Accuracy`,
  },
};
---

{% set statsConfig = [
  { name: 'Plate Appearances', stat: 'PA', isVolume: true },
  { name: 'wOBA', stat: 'wOBA', isVolume: false },
  { name: 'Strikeout Rate', stat: 'SO/PA', isVolume: false },
  { name: 'Walk Rate', stat: 'BB/PA', isVolume: false },
  { name: 'Hit By Pitch Rate', stat: 'HBP/PA', isVolume: false },
  { name: 'Home Run Rate', stat: 'HR/BIP', isVolume: false },
  { name: 'BABIP', stat: 'BABIP', isVolume: false },
  { name: 'Single Rate', stat: '1B/(BIP-HR)', isVolume: false },
  { name: 'Double Rate', stat: '2B/(BIP-HR)', isVolume: false },
  { name: 'Triple Rate', stat: '3B/(BIP-HR)', isVolume: false },
  { name: 'Run Rate', stat: 'R/PA', isVolume: false },
  { name: 'RBI Rate', stat: 'RBI/PA', isVolume: false },
  { name: 'Stolen Base Rate', stat: 'SB/TOF', isVolume: false },
  { name: 'Batting Average', stat: 'AVG', isVolume: false },
  { name: 'On-Base Percentage', stat: 'OBP', isVolume: false },
  { name: 'Slugging Percentage', stat: 'SLG', isVolume: false }
] if player.primary_type == 'batting' else [
  { name: 'Batters Faced', stat: 'BF', isVolume: true },
  { name: 'wOBA', stat: 'wOBA', isVolume: false },
  { name: 'Strikeout Rate', stat: 'SO/BF', isVolume: false },
  { name: 'Walk Rate', stat: 'BB/BF', isVolume: false },
  { name: 'Hit By Pitch Rate', stat: 'HBP/BF', isVolume: false },
  { name: 'Home Run Rate', stat: 'HR/BIP', isVolume: false },
  { name: 'BABIP', stat: 'BABIP', isVolume: false },
  { name: 'Single Rate', stat: '1B/(BIP-HR)', isVolume: false },
  { name: 'Double Rate', stat: '2B/(BIP-HR)', isVolume: false },
  { name: 'Triple Rate', stat: '3B/(BIP-HR)', isVolume: false },
  { name: 'Run Rate', stat: 'R/BF', isVolume: false },
  { name: 'Earned Run Rate', stat: 'ER/BF', isVolume: false },
  { name: 'Win Rate', stat: 'W/G', isVolume: false },
  { name: 'Loss Rate', stat: 'L/G', isVolume: false },
  { name: 'Save Rate', stat: 'SV/G', isVolume: false },
  { name: 'Hold Rate', stat: 'HLD/G', isVolume: false },
  { name: 'ERA', stat: 'ERA', isVolume: false },
  { name: 'WHIP', stat: 'WHIP', isVolume: false }
] %}

{% set metrics = [
  { value: 'MAE', name: 'MAE', title: 'MAE' },
  { value: 'RMSE', name: 'RMSE', title: 'RMSE'}
] %}

{% set adjustments = [
  { value: 'league-adj', name: 'League-Adjusted', chartSuffix: 'LA' },
  { value: 'raw', name: 'Raw', chartSuffix: '' }
] %}

<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
  <div class="text-center mb-12">
    <h1 class="text-5xl font-bold text-gray-900 dark:text-white mb-4">{{ player.name | safe }}</h1>
    <div class="flex justify-center items-center space-x-4">
      <span class="px-3 py-1 bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200 text-sm font-medium rounded-full">
        {{ player.primary_type | title }}
      </span>
      <span class="text-sm text-gray-500 dark:text-gray-400">ID: <span class="font-mono">{{ player.id }}</span></span>
    </div>

    {% include "2020-toggle.njk" %}
  </div>

  <!-- Performance Metrics Section -->
  <div class="mb-12">
    <div class="flex items-center mb-6">
      <div class="mr-4 p-2 bg-blue-100 dark:bg-blue-900 rounded-lg">
        <svg class="size-6 text-blue-600 dark:text-blue-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
          <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 15v4m6-6v6m6-4v4m6-6v6M3 11l6-5 6 5 5.5-5.5"/>
        </svg>
      </div>
      <h2 class="text-2xl font-bold text-gray-900 dark:text-white">Performance Metrics</h2>
    </div>
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
      {% for statConfig in statsConfig %}
      <div class="bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-700 p-6">
        <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">{{ statConfig.stat }} Comparison</h3>
        <div class="h-80"><canvas id="rate{{ statConfig.stat }}Chart"></canvas></div>
      </div>
      {% endfor %}
    </div>
  </div>

  <!-- Projection Accuracy Section -->
  <div class="mb-12">
    <div class="flex items-center mb-6">
      <div class="mr-4 p-2 bg-rose-100 dark:bg-rose-900 rounded-lg">
        <svg class="size-6 text-rose-600 dark:text-rose-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
          <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v15a1 1 0 0 0 1 1h15M8 16l2.5-5.5 3 3L17.273 7 20 9.667"/>
        </svg>
      </div>
      <h2 class="text-2xl font-bold text-gray-900 dark:text-white">Projection Accuracy</h2>
    </div>

    <div class="space-y-6">
      {% for statConfig in statsConfig %}
      <div class="mb-4 py-4">
        <div class="mb-4 py-4">
          <h4 class="text-xl font-semibold text-gray-900 dark:text-white mb-3">{{ statConfig.name }} ({{ statConfig.stat }})</h4>
          <div class="flex flex-wrap gap-4">
            <select class="metric-select px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white">
              {% for metric in metrics %}
              <option value="{{ metric.value }}">{{ metric.title }}</option>
              {% endfor %}
            </select>
            {% if not statConfig.isVolume %}
              <select class="adjustment-select px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white">
                {% for adj in adjustments %}
                <option value="{{ adj.value }}">{{ adj.name }}</option>
                {% endfor %}
              </select>
            {% endif %}
          </div>
        </div>

        {% for metric in metrics %}
          {% if statConfig.isVolume %}
            {% set adj = adjustments | selectattr("value", "equalto", "raw") | first %}
            <div class="bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-700 p-6 chart-container" data-stat="{{ statConfig.stat }}" data-metric="{{ metric.value }}" data-adjustment="{{ adj.value }}">
              <div class="h-80"><canvas id="accuracy{{ statConfig.stat }}{{ metric.title }}Chart"></canvas></div>
            </div>
          {% else %}
            {% for adj in adjustments %}
            <div class="bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-700 p-6 chart-container" data-stat="{{ statConfig.stat }}" data-metric="{{ metric.value }}" data-adjustment="{{ adj.value }}">
              <div class="h-80"><canvas id="accuracy{{ adj.chartSuffix }}{{ statConfig.stat }}{{ metric.title }}Chart"></canvas></div>
            </div>
            {% endfor %}
          {% endif %}
        {% endfor %}
      </div>
      {% endfor %}
    </div>
  </div>

  <!-- Statistical Summary Tables -->
  <div class="mb-12">
    <div class="flex items-center mb-6">
      <div class="mr-4 p-2 bg-green-100 dark:bg-green-900 rounded-lg">
        <svg class="size-6 text-green-600 dark:text-green-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
          <path stroke="currentColor" stroke-width="2" d="M3 11h18M3 15h18m-9-4v8m-8 0h16a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1Z"/>
        </svg>
      </div>
      <h2 class="text-2xl font-bold text-gray-900 dark:text-white">Statistical Summary</h2>
    </div>

    <!-- Yearly Performance Table -->
    <div class="bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-700 p-6">
      <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-4">Yearly Performance - {{ player.primary_type | title }}</h3>
      <div class="relative overflow-x-auto">
        <table class="w-full text-sm text-left text-gray-500 dark:text-gray-400">
          <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-800 dark:text-gray-400">
            <tr>
              <th scope="col" class="px-4 py-3">Year</th>
              <th scope="col" class="px-4 py-3">System</th>
              {% set rawStats = ['PA', 'AB', 'H', 'HR', 'BB', 'SO', 'HBP', 'R', 'RBI', 'SB', 'wOBA', 'AVG', 'OBP', 'SLG'] if player.primary_type == 'batting' else ['BF', 'IP', 'H', 'HR', 'BB', 'SO', 'HBP', 'ER', 'W', 'L', 'SV', 'wOBA', 'ERA', 'WHIP'] %}
              {% for stat in rawStats %}
              <th scope="col" class="px-4 py-3 text-right">{{ stat }}</th>
              {% endfor %}
            </tr>
          </thead>
          <tbody>
            {% for year, yearData in player.years %}
            {% if yearData[player.primary_type] %}

            <!-- Dynamic Projection System Rows -->
            {% set systemColors = {
              'Marcel': 'text-amber-900 dark:text-amber-700',
              'Steamer': 'text-indigo-600 dark:text-indigo-400',
              'ZiPS': 'text-green-600 dark:text-green-400',
              'Razzball': 'text-red-600 dark:text-red-400',
              'Davenport (MLB)': 'text-purple-600 dark:text-purple-400',
              'Davenport (Full)': 'text-purple-600 dark:text-purple-400'
            } %}

            {% for system in site.meta.projection_systems %}
            {% if yearData[player.primary_type][system] %}
            <tr class="bg-white border-b dark:bg-gray-900 dark:border-gray-700">
              <td class="px-4 py-3 font-medium text-gray-900 dark:text-white">{{ year }}</td>
              <td class="px-4 py-3 {{ systemColors[system] or 'text-gray-600 dark:text-gray-400' }}">{{ system }}</td>
              {% for stat in rawStats %}
              <td class="px-4 py-3 text-right">
                {% if yearData[player.primary_type][system][stat] is defined and yearData[player.primary_type][system][stat] is not none %}
                <span class="font-mono">
                  {%- if stat == 'IP' -%}
                    {{ yearData[player.primary_type][system][stat] | toFixed(1) }}
                  {%- elif stat in ['PA', 'AB', 'H', 'HR', 'BB', 'SO', 'HBP', 'R', 'RBI', 'SB', 'BF', 'ER', 'W', 'L', 'SV'] -%}
                    {{ yearData[player.primary_type][system][stat] | round(0) }}
                  {%- elif stat in ['wOBA', 'AVG', 'OBP', 'SLG'] -%}
                    {{ yearData[player.primary_type][system][stat] | toFixed(3) }}
                  {%- elif stat in ['ERA', 'WHIP'] -%}
                    {{ yearData[player.primary_type][system][stat] | toFixed(2) }}
                  {%- else -%}
                    {{ yearData[player.primary_type][system][stat] | round(1) }}
                  {%- endif -%}
                </span>
                {% else %}
                -
                {% endif %}
              </td>
              {% endfor %}
            </tr>
            {% endif %}
            {% endfor %}

            <!-- Actual Stats Row -->
            {% if yearData[player.primary_type]['Actual'] %}
            <tr class="bg-gray-50 border-b dark:bg-gray-800 dark:border-gray-600">
              <td class="px-4 py-3 font-medium text-gray-900 dark:text-white">{{ year }}</td>
              <td class="px-4 py-3 text-gray-900 dark:text-white font-medium">Actual</td>
              {% for stat in rawStats %}
              <td class="px-4 py-3 text-right">
                {% if yearData[player.primary_type]['Actual'][stat] is defined and yearData[player.primary_type]['Actual'][stat] is not none %}
                <span class="font-medium text-gray-900 dark:text-white font-mono">
                  {%- if stat == 'IP' -%}
                    {{ yearData[player.primary_type]['Actual'][stat] | toFixed(1) }}
                  {%- elif stat in ['PA', 'AB', 'H', 'HR', 'BB', 'SO', 'HBP', 'R', 'RBI', 'SB', 'BF', 'ER', 'W', 'L', 'SV'] -%}
                    {{ yearData[player.primary_type]['Actual'][stat] | round(0) }}
                  {%- elif stat in ['wOBA', 'AVG', 'OBP', 'SLG'] -%}
                    {{ yearData[player.primary_type]['Actual'][stat] | toFixed(3) }}
                  {%- elif stat in ['ERA', 'WHIP'] -%}
                    {{ yearData[player.primary_type]['Actual'][stat] | toFixed(2) }}
                  {%- else -%}
                    {{ yearData[player.primary_type]['Actual'][stat] | round(1) }}
                  {%- endif -%}
                </span>
                {% else %}
                -
                {% endif %}
              </td>
              {% endfor %}
            </tr>
            {% endif %}

            {% endif %}
            {% endfor %}
          </tbody>
        </table>
      </div>
    </div>
  </div>
</div>

{% block scripts %}
<script>
  {% include "chart-utils.js" %}
  {% include "player-charts.js" %}

  // Global variables to store original data and chart instances
  let originalPlayerYears = {{ player.years | dump | safe }};
  let originalPlayerType = '{{ player.primary_type }}';
  let projectionSystems = {{ site.meta.projection_systems | dump | safe }};
  let chartInstances = {};

  document.addEventListener('DOMContentLoaded', function() {
    initializePlayerCharts(originalPlayerYears, originalPlayerType, projectionSystems);
    initializePlayerChartFilters();
    initialize2020Toggle();
  });

  function initializePlayerChartFilters() {
    const metricSelects = document.querySelectorAll('.metric-select');
    const adjustmentSelects = document.querySelectorAll('.adjustment-select');

    function updateChartVisibility() {
      // Get current values from the dropdowns
      const selectedMetric = metricSelects[0].value;
      const selectedAdjustment = adjustmentSelects[0].value;

      // Get all chart containers
      const chartContainers = document.querySelectorAll('.chart-container');

      chartContainers.forEach(container => {
        const chartMetric = container.dataset.metric;
        const chartAdjustment = container.dataset.adjustment;
        const chartStat = container.dataset.stat;

        // Volume stats (PA, BF) only have raw adjustment, so ignore adjustment selection for them
        const isVolumeStat = chartStat === 'PA' || chartStat === 'BF';

        const shouldShow = chartMetric === selectedMetric &&
          (isVolumeStat || chartAdjustment === selectedAdjustment);

        container.style.display = shouldShow ? 'block' : 'none';
      });
    }

    function syncDropdowns(changedSelect, selectType) {
      if (selectType === 'metric') {
        // Sync all metric dropdowns
        metricSelects.forEach(select => {
          if (select !== changedSelect) {
            select.value = changedSelect.value;
          }
        });
      } else if (selectType === 'adjustment') {
        // Sync all adjustment dropdowns
        adjustmentSelects.forEach(select => {
          if (select !== changedSelect) {
            select.value = changedSelect.value;
          }
        });
      }
      updateChartVisibility();
    }

    // Add event listeners to all metric dropdowns
    metricSelects.forEach(select => {
      select.addEventListener('change', function() {
        syncDropdowns(this, 'metric');
      });
    });

    // Add event listeners to all adjustment dropdowns
    adjustmentSelects.forEach(select => {
      select.addEventListener('change', function() {
        syncDropdowns(this, 'adjustment');
      });
    });

    // Initial visibility setup
    updateChartVisibility();
  }
</script>
{% endblock %}

